// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChallengeType {
  preview
  console
}

enum ChallengeCategory {
  coding
  system_design
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  nickname  String?
  avatarUrl String?
  lastLogin DateTime? @db.Timestamptz(3)
  position  String?
  theme_ide String?   @default("default")
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamptz(3)

  challenges          Challenge[]
  submissionChallenge SubmissionChallenge[]
  StudySeries         StudySeries[]
  seriesUser          SeriesUser[]
  reviewSubmission    ReviewSubmission[]
  readReview          ReadReview[]
}

model Challenge {
  id                  String            @id @default(uuid())
  title               String
  description         String
  spendTime           Int?
  userCompleted       Int?              @default(0)
  level               Int?
  authorId            String
  codeTemplate        Json
  codeSolution        Json
  codeTest            Json
  solutionDescription String?
  category            ChallengeCategory @default(value: coding)
  status              Int               @default(1)
  type                ChallengeType     @default(value: preview)
  createdAt           DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime          @default(now()) @updatedAt @db.Timestamptz(3)

  author               User                   @relation(fields: [authorId], references: [id])
  submissionChallenge  SubmissionChallenge[]
  studySeriesChallenge StudySeriesChallenge[]
  challengeLanguage    ChallengeLanguage[]
}

model SubmissionChallenge {
  id          String    @id @default(uuid())
  challengeId String
  userId      String
  code        String?
  status      Int       @default(0)
  startTime   DateTime  @db.Timestamptz(3)
  endTime     DateTime? @db.Timestamptz(3)
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamptz(3)
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  reviewSubmission ReviewSubmission[]

  @@unique([challengeId, userId])
}

model ReviewSubmission {
  id              String   @id @default(uuid())
  submissionId    String
  userId          String
  content         String
  parentCommentId String?
  createdAt       DateTime @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  user       User                @relation(fields: [userId], references: [id])
  submission SubmissionChallenge @relation(fields: [submissionId], references: [id])

  readReview ReadReview[]
}

model ReadReview {
  reviewId String
  userId   String
  readAt   DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  reviewSubmission ReviewSubmission @relation(fields: [reviewId], references: [id])
  user             User             @relation(fields: [userId], references: [id])

  @@id([reviewId, userId])
}

model ReactionReview {
  reviewId String
  userId   String

  @@id([reviewId, userId])
}

model LanguageFramework {
  id        String   @id @default(uuid())
  name      String   @unique
  imageUrl  String?
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  challengeLanguage ChallengeLanguage[]
}

model StudySeries {
  id String @id @default(uuid())

  authorId String
  user     User   @relation(fields: [authorId], references: [id])

  name        String
  description String
  totalTime   Int?
  image_url   String?
  status      Int      @default(1)
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(3)

  studySeriesChallenge StudySeriesChallenge[]
  contributors         SeriesUser[]
}

model StudySeriesChallenge {
  seriesId    String
  challengeId String

  challenge   Challenge   @relation(fields: [challengeId], references: [id])
  studySeries StudySeries @relation(fields: [seriesId], references: [id])

  createdAt DateTime? @default(now()) @db.Timestamptz()
  updatedAt DateTime? @default(now()) @updatedAt @db.Timestamptz(3)

  @@id([seriesId, challengeId])
}

model SeriesUser {
  authorId String
  seriesId String

  user   User        @relation(fields: [authorId], references: [id])
  series StudySeries @relation(fields: [seriesId], references: [id])

  @@id([authorId, seriesId])
}

model NewWords {
  id         String @id @default(uuid())
  word       String @unique
  definition Json
  example    String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(3)
}

model ChallengeLanguage {
  id          String            @unique @default(uuid())
  name        String
  description String
  template    Json
  challengeId String
  frameworkId String
  createdAt   DateTime          @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime          @default(now()) @updatedAt @db.Timestamptz(3)
  challenge   Challenge         @relation(fields: [challengeId], references: [id])
  framework   LanguageFramework @relation(fields: [frameworkId], references: [id])

  @@id([challengeId, frameworkId])
}
